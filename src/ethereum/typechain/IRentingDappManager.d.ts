/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IRentingDappManagerInterface extends ethers.utils.Interface {
  functions: {
    "isAdmin(address)": FunctionFragment;
    "payRewards(address,address,uint256,uint256)": FunctionFragment;
    "raiseDispute(address,address,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "payRewards",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raiseDispute",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raiseDispute",
    data: BytesLike
  ): Result;

  events: {};
}

export class IRentingDappManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IRentingDappManagerInterface;

  functions: {
    isAdmin(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAdmin(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    payRewards(
      _buyer: string,
      _seller: string,
      _value: BigNumberish,
      _distribute: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "payRewards(address,address,uint256,uint256)"(
      _buyer: string,
      _seller: string,
      _value: BigNumberish,
      _distribute: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    raiseDispute(
      _product: string,
      _rent: string,
      _details: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "raiseDispute(address,address,string)"(
      _product: string,
      _rent: string,
      _details: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  isAdmin(user: string, overrides?: CallOverrides): Promise<boolean>;

  "isAdmin(address)"(user: string, overrides?: CallOverrides): Promise<boolean>;

  payRewards(
    _buyer: string,
    _seller: string,
    _value: BigNumberish,
    _distribute: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "payRewards(address,address,uint256,uint256)"(
    _buyer: string,
    _seller: string,
    _value: BigNumberish,
    _distribute: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  raiseDispute(
    _product: string,
    _rent: string,
    _details: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "raiseDispute(address,address,string)"(
    _product: string,
    _rent: string,
    _details: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    isAdmin(user: string, overrides?: CallOverrides): Promise<boolean>;

    "isAdmin(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payRewards(
      _buyer: string,
      _seller: string,
      _value: BigNumberish,
      _distribute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "payRewards(address,address,uint256,uint256)"(
      _buyer: string,
      _seller: string,
      _value: BigNumberish,
      _distribute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    raiseDispute(
      _product: string,
      _rent: string,
      _details: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "raiseDispute(address,address,string)"(
      _product: string,
      _rent: string,
      _details: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    isAdmin(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAdmin(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payRewards(
      _buyer: string,
      _seller: string,
      _value: BigNumberish,
      _distribute: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "payRewards(address,address,uint256,uint256)"(
      _buyer: string,
      _seller: string,
      _value: BigNumberish,
      _distribute: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    raiseDispute(
      _product: string,
      _rent: string,
      _details: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "raiseDispute(address,address,string)"(
      _product: string,
      _rent: string,
      _details: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isAdmin(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAdmin(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payRewards(
      _buyer: string,
      _seller: string,
      _value: BigNumberish,
      _distribute: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "payRewards(address,address,uint256,uint256)"(
      _buyer: string,
      _seller: string,
      _value: BigNumberish,
      _distribute: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    raiseDispute(
      _product: string,
      _rent: string,
      _details: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "raiseDispute(address,address,string)"(
      _product: string,
      _rent: string,
      _details: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
